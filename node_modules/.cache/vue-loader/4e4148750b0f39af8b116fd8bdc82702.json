{"remainingRequest":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\src\\components\\Register.vue?vue&type=template&id=7bf3755a&scoped=true&","dependencies":[{"path":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\src\\components\\Register.vue","mtime":1618215631081},{"path":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\lowxi\\Documents\\GitHub\\AskAway\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}